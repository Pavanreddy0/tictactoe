{"ast":null,"code":"var _jsxFileName = \"/Users/pavanreddy/Pavan/Scalex/tictactoe/tictactoe/src/components/game/game.js\";\nimport React from \"react\";\nimport Board from \"../board/board\";\nimport Message from \"../message/message\";\nimport Button from \"../button/button\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Game extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      board: Array(9).fill(\"\"),\n      // gaming board\n      player: \"X\",\n      // current player\n      message: \"Click on the grid to Start\",\n      // message -> which player is playing and if the game is won or draw\n      moves: [] // selected position of the player\n\n    };\n    this.winPositions = [// possible win position\n    [0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n\n    this.isWon = board => {\n      let won = false;\n\n      for (let i = 0; i < this.winPositions.length; i++) {\n        const [a, b, c] = this.winPositions[i];\n\n        if (board[a] !== \"\" && board[a] === board[b] && board[b] === board[c]) {\n          won = true;\n        }\n      }\n\n      return won;\n    };\n\n    this.reset = () => {\n      const board = Array(9).fill(\"\");\n      const message = \"Click on the grid to Start\";\n      const player = \"X\";\n      this.setState({\n        board,\n        message,\n        player\n      });\n    };\n\n    this.handleUndo = () => {\n      if (this.state.moves.length === 0) return;\n      const moves = [...this.state.moves];\n      const move = moves.pop();\n      const board = [...this.state.board];\n      board[move.pos] = \"\";\n      const player = move.player;\n      this.setState({\n        moves,\n        board,\n        player,\n        message: `TURN: ${player}`\n      });\n    };\n\n    this.handleChange = pos => {\n      if (this.state.player === \"\" || this.state.board[pos] !== \"\") {\n        return;\n      }\n\n      const board = [...this.state.board];\n      board[pos] = this.state.player;\n      this.setState({\n        board\n      }); // updating board for current player\n      // Adding the current player and his position to the stack\n\n      const move = {\n        pos: pos,\n        player: this.state.player\n      };\n      const moves = [...this.state.moves, move];\n      this.setState({\n        moves\n      });\n\n      if (this.isWon(board)) {\n        // once game is over, player will not be able play anymore\n        this.setState({\n          message: `WON: ${this.state.player}`,\n          player: \"\"\n        });\n        return;\n      }\n\n      if (board.indexOf(\"\") === -1) {\n        // if no more moves left, then the game is draw\n        this.setState({\n          message: `DRAW`,\n          player: \"\"\n        });\n      } else {\n        // if some moves are left\n        const player = this.state.player === \"X\" ? \"O\" : \"X\";\n        this.setState({\n          player,\n          message: `TURN: ${player}`\n        });\n      }\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Message, {\n        value: this.state.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Board, {\n        onClick: this.handleChange,\n        value: this.state.board\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: this.handleUndo,\n        value: \"Undo Move\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: this.reset,\n        value: \"Refresh\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Game;","map":{"version":3,"sources":["/Users/pavanreddy/Pavan/Scalex/tictactoe/tictactoe/src/components/game/game.js"],"names":["React","Board","Message","Button","Game","Component","state","board","Array","fill","player","message","moves","winPositions","isWon","won","i","length","a","b","c","reset","setState","handleUndo","move","pop","pos","handleChange","indexOf","render"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Board from \"../board/board\";\nimport Message from \"../message/message\";\nimport Button from \"../button/button\";\n\nclass Game extends React.Component {\n  state = {\n    board: Array(9).fill(\"\"), // gaming board\n    player: \"X\", // current player\n    message: \"Click on the grid to Start\", // message -> which player is playing and if the game is won or draw\n    moves: [], // selected position of the player\n  };\n  winPositions = [\n    // possible win position\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n\n  // Function to check if the game is won\n  isWon = (board) => {\n    let won = false;\n    for (let i = 0; i < this.winPositions.length; i++) {\n      const [a, b, c] = this.winPositions[i];\n      if (board[a] !== \"\" && board[a] === board[b] && board[b] === board[c]) {\n        won = true;\n      }\n    }\n    return won;\n  };\n\n  // Function to reset or restart the game\n  reset = () => {\n    const board = Array(9).fill(\"\");\n    const message = \"Click on the grid to Start\";\n    const player = \"X\";\n    this.setState({ board, message, player });\n  };\n\n  // Function to handle the undo of the move that was made by player\n  handleUndo = () => {\n    if (this.state.moves.length === 0) return;\n    const moves = [...this.state.moves];\n    const move = moves.pop();\n    const board = [...this.state.board];\n    board[move.pos] = \"\";\n    const player = move.player;\n    this.setState({ moves, board, player, message: `TURN: ${player}` });\n  };\n\n  handleChange = (pos) => {\n    if (this.state.player === \"\" || this.state.board[pos] !== \"\") {\n      return;\n    }\n    const board = [...this.state.board];\n    board[pos] = this.state.player;\n    this.setState({ board }); // updating board for current player\n\n    // Adding the current player and his position to the stack\n    const move = { pos: pos, player: this.state.player };\n    const moves = [...this.state.moves, move];\n    this.setState({ moves });\n\n    if (this.isWon(board)) {\n      // once game is over, player will not be able play anymore\n      this.setState({\n        message: `WON: ${this.state.player}`,\n        player: \"\",\n      });\n      return;\n    }\n\n    if (board.indexOf(\"\") === -1) {\n      // if no more moves left, then the game is draw\n      this.setState({ message: `DRAW`, player: \"\" });\n    } else {\n      // if some moves are left\n      const player = this.state.player === \"X\" ? \"O\" : \"X\";\n      this.setState({ player, message: `TURN: ${player}` });\n    }\n  };\n\n  render() {\n    return (\n      <div>\n        <Message value={this.state.message} />\n        <Board onClick={this.handleChange} value={this.state.board} />\n        <Button onClick={this.handleUndo} value=\"Undo Move\" />\n        <Button onClick={this.reset} value=\"Refresh\" />\n      </div>\n    );\n  }\n}\n\nexport default Game;\n"]},"metadata":{},"sourceType":"module"}